Problem Lists: https://leetcode.com/list/55ac4kuc


Depends on future values, and if need to find minimum or maximum of something. ane wala number ko ane wale number pe depend karega and so on
will somehow end as some singular point. So bacically when there is a destination to find on and it depends on further numbers not yet visited.
All we have to do is return min/max (dp(i - 1), dp(i - 4) etc) + value[i]; with base case as whatever the last one will provide the answer to.


Statement:
    Given a target find minimum (maximum) cost / path / sum to reach the target.

Approach:
    Choose minimum (maximum) path among all possible paths before the current state, then add value for the current state.

    routes[i] = min(routes[i-1], routes[i-2], ... , routes[i-k]) + cost[i]
    Generate optimal solutions for all values in the target and return the value for the target.

Top-Down:
    for (int j = 0; j < ways.size(); ++j) {
        result = min(result, topDown(target - ways[j]) + cost/ path / sum);
    }
    return memo[/*state parameters*/] = result;

Bottom-Up:
    for (int i = 1; i <= target; ++i) {
        for (int j = 0; j < ways.size(); ++j) {
            if (ways[j] <= i) {
                dp[i] = min(dp[i], dp[i - ways[j]] + cost / path / sum) ;
            }
        }
    }
 
    return dp[target]