Problem List: https://leetcode.com/list/55aj8s16



To get the answer of a point, we need to know all points of previous all and all the ones preceeding
Like in an array to find the value of i, we need to find the best of 0 to i - 1 and add this to best of i to need
Getting it? like to know better, see question 96 of LC. you will understand better.
mathematically speaking, best(i) = best(0 -> i - 1) + best(i -> n)



Generate problem statement for this pattern

Statement

    Given a set of numbers find an optimal solution for a problem considering the current number and the best you can get from the left and right sides.

Approach

    Find all optimal solutions for every interval and return the best possible answer.

// from i to j
dp[i][j] = dp[i][k] + result[k] + dp[k+1][j]

Get the best from the left and right sides and add a solution for the current position.

Top-Down

for (int k = i; k <= j; ++k) {
    result = max(result, topDown(nums, i, k-1) + result[k] + topDown(nums, k+1, j));
}
return memo[/*state parameters*/] = result;

Bottom-Up

for(int l = 1; l<n; l++) {
   for(int i = 0; i<n-l; i++) {
       int j = i+l;
       for(int k = i; k<j; k++) {
           dp[i][j] = max(dp[i][j], dp[i][k] + result[k] + dp[k+1][j]);
       }
   }
}
 
return dp[0][n-1];

for(int l = 1; l<n; l++) {
   for(int i = 0; i<n-l; i++) {
       int j = i+l;
       for(int k = i; k<j; k++) {
           dp[i][j] = max(dp[i][j], dp[i][k] + result[k] + dp[k+1][j]);
       }
   }
}
 
return dp[0][n-1]
